import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load historical weather data into a DataFrame
data = pd.read_csv('C:\Dharshan\weather.csv')
print(data.head())

df = data.head(25)
#Analyze historical weather data (e.g., temperature, precipitation, wind speed) for a specific location.
plt.figure(figsize=(12,8))
sns.barplot(x='wind_speed',y='wind_speed',data=df,color='blue',label='region',orient='h')
sns.barplot(x='wind_direction',y='wind_speed',data=df,color='orange',label='reside',orient='h')
plt.title("Weather Analysis")
plt.xlabel("temperature")
plt.ylabel("wind speed")
plt.show()

# Visualize trends in temperature or precipitation over time using line charts.
plt.figure(figsize=(10, 6))
sns.lineplot(x='wind_speed', y='wind_direction', data=df, label='wind speed', marker='o', linestyle='-', color='blue')
sns.lineplot(x='wind_speed', y='temperature', data=df, label='temperature', marker='o', linestyle='-', color='orange')
plt.title('General trend in weather')
plt.xlabel('humidity')
plt.ylabel('precipitation')
plt.legend()
# Rotate x-axis labels for better visibility
plt.xticks(rotation=45)
plt.show()

Regioncode= input('Enter the  region code : ')
reside = {
    'Yr': [Regioncode] * 100,
    'x': np.random.randint(0, 101, 100),  # x-coordinates
    'y': np.random.randint(0, 101, 100)   # y-coordinates
}
df_service = pd.DataFrame(reside)
# Create a heatmap for average network distribution regarding their age
plt.figure(figsize=(10, 6))
sns.kdeplot(data=df_service, x='x', y='y', cmap='coolwarm', fill=True, thresh=0.05)
plt.title(Regioncode+'  --- temperature analysis')
plt.xlabel('Temperature')
plt.ylabel('Range')
plt.show()


weather_data = pd.read_csv('C:\Dharshan\weather.csv')
subset_data = weather_data.head(8)
labels = subset_data['region']
values = subset_data['wind_speed']
plt.pie(values, labels=labels, autopct='%1.1f%%')
plt.title('Analyse of wind speed')
plt.show()

# Sort the data based on temperature in descending order
sorted_data = weather_data.sort_values(by='temperature', ascending=False)
# Select the coldest place
coldest_place = sorted_data.head(1)
location = coldest_place['location']
# Create a map centered around the mean latitude and longitude of the data
map_weather = folium.Map(location=[62.0874, 152.7311], zoom_start=6, width=900, height=500)
folium.Marker([62.0874, 152.7311], popup=location).add_to(map_weather)
print(location)
map_weather
